// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// CheckRetry is an autogenerated mock type for the CheckRetry type
type CheckRetry struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, resp, err
func (_m *CheckRetry) Execute(ctx context.Context, resp *http.Response, err error) (bool, error) {
	ret := _m.Called(ctx, resp, err)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *http.Response, error) (bool, error)); ok {
		return rf(ctx, resp, err)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *http.Response, error) bool); ok {
		r0 = rf(ctx, resp, err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *http.Response, error) error); ok {
		r1 = rf(ctx, resp, err)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCheckRetry creates a new instance of CheckRetry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCheckRetry(t interface {
	mock.TestingT
	Cleanup(func())
}) *CheckRetry {
	mock := &CheckRetry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
